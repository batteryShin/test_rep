#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cstring>

using namespace std;


class TwoLLogo {
public:
	vector<string> ggrid;
	int covered[30][30];
	int covered_inner[30][30];
	long long cnt;
	
	int count_cases(pair<int,int>& pos1, pair<int,int>& len1, pair<int,int>& pos2, pair<int,int>& len2) {
		int x, y;
		int ret = (len1.first-1) * (len1.second-1) * (len2.first-1) * (len2.second-1);
		
		if( pos1.first==pos2.first ) {
			x = pos2.second - pos1.second + 1;
			ret -= (len1.first-1) * max(len1.second-x+1,0) * (len2.first-1) * (len2.second-1);
		} else if( pos1.second==pos2.second ) {
			y = pos2.first - pos1.first + 1;
			ret -= (len1.first-1) * (len1.second-1) * max(len2.first-y+1,0) * (len2.second-1);
		} else if( pos2.second>pos1.second ) {
			x = pos2.second - pos1.second + 1;
			y = pos2.first - pos1.first + 1;
			ret -= (len1.first-1) * max(len1.second-x+1,0) * max(len2.first-y+1,0) * (len2.second-1);
		}
		
		return ret;
	}
	
	void check_length(pair<int,int>& pos, pair<int,int>& len) {
		len.first = len.second = 0;
		
		int rm, cm;
		rm = pos.first;
		cm = pos.second;
		while( rm>=0 && ggrid[rm][cm]=='.' ) {
			len.first++;
			rm--;
		}		

		rm = pos.first;
		cm = pos.second;
		while( cm<ggrid[0].size() && ggrid[rm][cm]=='.' ) {
			len.second++;
			cm++;
		}
	}
	
	void search( pair<int,int>& pos1, pair<int,int>& len1, pair<int,int>& pos2, pair<int,int>& len2, long long& cnt ) {
		for(int r=1; r<ggrid.size(); r++) {
		for(int c=0; c<ggrid[0].size()-1; c++) {
			if( pos1.first==-1 ) {
				if( covered[r][c]!=0 )	continue;
				
				covered[r][c] += 1;
				covered_inner[r][c] += 1;
				pos1.first = r;
				pos1.second = c;
				
				check_length(pos1,len1);
				search(pos1,len1,pos2,len2,cnt);
				
				for(int i=0; i<30; i++) {
					memcpy(covered_inner[i],covered[i],sizeof(int)*30);
				}
				pos1.first = -1;
				pos1.second = -1;
			} else {
				if( covered_inner[r][c]!=0 )	continue;
				
				covered_inner[r][c] += 1;
				pos2.first = r;
				pos2.second = c;
				
				check_length(pos2,len2);
				cnt += count_cases(pos1,len1,pos2,len2);
//				cout << "pos1 = " << pos1.first << "," << pos1.second;
//				cout << "   pos2 = " << pos2.first << "," << pos2.second << endl;
//				cout << "current cnt = " << cnt << endl;
									
				pos2.first = -1;
				pos2.second = -1;
			}
		}
		}
	}
	
	long long countWays(vector <string> grid) {
		cnt = 0;
		for(int i=0; i<30; i++) {
			memset(covered[i],0,sizeof(int)*30);
			memset(covered_inner[i],0,sizeof(int)*30);
		}
		ggrid.clear();
		ggrid = grid;
		for(int r=0; r<grid.size(); r++) {
		for(int c=0; c<grid[0].size(); c++) {
			if( grid[r][c]=='#' ) {
				covered[r][c] = 1;
				covered_inner[r][c] = 1;				
			}
			
			if( r>0 && grid[r-1][c]=='#' ) {
				covered[r][c] = 1;
				covered_inner[r][c] = 1;				
			}
			
			if( c<grid[0].size()-1 && grid[r][c+1]=='#' ) {
				covered[r][c] = 1;
				covered_inner[r][c] = 1;				
			}
		}
		}
		
		pair<int,int> pos1, len1, pos2, len2;
		pos1.first = pos1.second = -1;
		pos2.first = pos2.second = -1;
		len1.first = len1.second = 0;
		len2.first = len2.second = 0;
		search(pos1, len1, pos2, len2, cnt);
		
		return cnt;
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, vector <string> p0, bool hasAnswer, long long p1) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p0[i] << "\"";
	}
	cout << "}";
	cout << "]" << endl;
	TwoLLogo *obj;
	long long answer;
	obj = new TwoLLogo();
	clock_t startTime = clock();
	answer = obj->countWays(p0);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p1 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p1;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	vector <string> p0;
	long long p1;
	
	{
	// ----- test 0 -----
	string t0[] = {"....","...."};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 1ll;
	all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	string t0[] = {".##..","...#.",".#.#.","#...#"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 3ll;
	all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	string t0[] = {"..#.","#.#.","....","..#."};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 4ll;
	all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	string t0[] = {"..",".."};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 0ll;
	all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	string t0[] = {".#.#","....",".#.#","...."};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 34ll;
	all_right = KawigiEdit_RunTest(4, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 5 -----
	string t0[] = {"##############","##############","#.############","#.############","#.############","#.############","#.############","#.############","#.#####.######","#.#####.######","#.#####.######","#....##.######","#######.######","#######.######","#######.######","#######.######","#######.######","#######.######","#######......#","##############"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 1350ll;
	all_right = KawigiEdit_RunTest(5, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 6 -----
	string t0[] = {"#......",".#....#",".#.#...","#....#.",".##..#.",".#.....",".....#.",".#.#...",".#...#.","..##..."};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 2386ll;
	all_right = KawigiEdit_RunTest(6, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 7 -----
	string t0[] = {};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 5020791386ll;
	all_right = KawigiEdit_RunTest(7, p0, true, p1) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
